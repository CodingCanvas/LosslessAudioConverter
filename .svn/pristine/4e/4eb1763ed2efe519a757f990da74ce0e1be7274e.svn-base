using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;

namespace LosslessAudioConverter.Model
{
    public class MusicLibraryConverter
    {
        public string SourceDirectory { get; set; }
        public string TargetDirectory { get; set; }

        public MusicLibraryConverter()
        {
            //Get the default music directories from the app's settings file.
            string defaultSourceFolder = Properties.Settings.Default.previousSourceFolder.ToString();
            string defaultTargetFolder = Properties.Settings.Default.previousTargetFolder.ToString();

            //if no default source folder exists, use window's default music directory as the default
            defaultSourceFolder = string.IsNullOrWhiteSpace(defaultSourceFolder)
                ? Environment.GetFolderPath(Environment.SpecialFolder.MyMusic, Environment.SpecialFolderOption.None)
                : defaultSourceFolder;

            defaultSourceFolder = (Directory.Exists(defaultSourceFolder))
                ? defaultSourceFolder
                : "";

            defaultTargetFolder = (Directory.Exists(defaultTargetFolder))
                ? defaultTargetFolder
                : "";

            //At this point, we either have valid, existing paths, or the values will be empty strings.  Either way, pump 'em into the GUI as defaults.  Boom!
            SourceDirectory = defaultSourceFolder;
            TargetDirectory = defaultTargetFolder;
        }

        //TODO: Include a collection of all valid lossless extensions (flac, wav, ape, alac, other?)
        private const string LosslessExtension = ".flac";

        //TODO: Make this configurable.
        private const string LossyOutputExtension = ".ogg";
        private bool FileIsLossless(string filePath)
        {
            return filePath.EndsWith(LosslessExtension, StringComparison.OrdinalIgnoreCase);
        }

        private static readonly object _musicConversionLock = new object();
        public void ConvertLosslessFiles_Parallel(CancellationToken cancelToken, IProgress<ProgressUpdate> conversionProgress = null, IProgress<ProgressUpdate> copyingProgress = null)
        {
            var losslessSourceFiles = new ConcurrentQueue<string>();
            var srcFilesToCopy = new ConcurrentQueue<string>();

            //I really need some collectionSplitter, linq-style, that provides 2 out parameters for lists, or IEnumerables, or something.
            foreach (string sourceFilePath in Directory.EnumerateFiles(SourceDirectory, "*.*", SearchOption.AllDirectories))
            {
                //Fancy inline voodoo.  I did it this way to be silly, not because it's at all readable.
                (FileIsLossless(sourceFilePath) ? losslessSourceFiles : srcFilesToCopy).Enqueue(sourceFilePath);
            }

            int losslessSourceFileCount = losslessSourceFiles.Count; //Capture this before we dequeue.

            //Callback for zero progress.
            int convertedFileCount = 0;
            if (!cancelToken.IsCancellationRequested && conversionProgress != null)
                conversionProgress.Report(ProgressUpdate.Create(convertedFileCount, losslessSourceFileCount));

            //Create one long running task per logical core.
            //This generally speeds up conversion quite a lot
            Task[] conversionTasks = new Task[Environment.ProcessorCount];

            for (int i = 0; i < conversionTasks.Length; i++)
            {
                conversionTasks[i] = new Task(() =>
                    {
                        using (IAudioConverter converter = new AudioConverter_Sox())
                        {
                            string absoluteSourcePath;
                            while (losslessSourceFiles.TryDequeue(out absoluteSourcePath))
                            {
                                if (cancelToken.IsCancellationRequested)
                                {
                                    break; //don't run the rest of the code block after breaking the parallel loop, yo'.
                                }

                                string absoluteTargetPath = GetAbsoluteTargetPath(absoluteSourcePath, TargetDirectory, fileIsLossless: true);
                                EnsureDirectoryExistsForFile(absoluteTargetPath);

                                //Copy or convert only if we need to.
                                if (!File.Exists(absoluteTargetPath))
                                    converter.ConvertAudioFile_Synchronous(absoluteSourcePath, absoluteTargetPath);

                                //Whether we converted the file, or skipped it because it already exists, call the progress update!  Boom!
                                Interlocked.Increment(ref convertedFileCount);
                                if (conversionProgress != null) conversionProgress.Report(ProgressUpdate.Create(convertedFileCount, losslessSourceFileCount));
                            }
                        }
                    },
                    cancelToken,
                    TaskCreationOptions.LongRunning);
            }

            foreach (var conversionTask in conversionTasks.Where(task => !task.IsCanceled))
            {
                try
                {
                    conversionTask.Start();
                }
                catch (TaskCanceledException)
                {
                    //do...... nothing?
                }
            }

            Task.WaitAll(conversionTasks);

            foreach (var conversionTask in conversionTasks)
                conversionTask.Dispose();

            //Report zero copying progress
            int copiedFileCount = 0;
            if (!cancelToken.IsCancellationRequested && copyingProgress != null)
                copyingProgress.Report(ProgressUpdate.Create(copiedFileCount, srcFilesToCopy.Count));

            foreach (var fileToCopy in srcFilesToCopy)
            {
                if (cancelToken.IsCancellationRequested) return;

                string fullOutputPath = GetAbsoluteTargetPath(fileToCopy, TargetDirectory, fileIsLossless: false);
                EnsureDirectoryExistsForFile(fullOutputPath);

                //TODO: We need option to skip/reconvert/pre-delete files that already exist.  For now, though, just skip files we've already completed.  Nice.
                if (!File.Exists(fullOutputPath))
                {
                    File.Copy(fileToCopy, fullOutputPath, overwrite: false);
                }

                //Update the file copying progress now!  Yeah!! :D
                copiedFileCount++;
                if (copyingProgress != null) copyingProgress.Report(ProgressUpdate.Create(copiedFileCount, srcFilesToCopy.Count));
            }
        }

        /// <summary>
        /// If the given path's directory doesn't exist, we creat it in a threadsafe manner.  How nice of us.
        /// </summary>
        /// <param name="fullFilePath"></param>
        private static void EnsureDirectoryExistsForFile(string fullFilePath)
        {
            string targetDirectory = new FileInfo(fullFilePath).DirectoryName;

            if (!Directory.Exists(targetDirectory))
            {
                //Don't concurrently create directories, ya' dingus.  Lock that shit down.
                lock (_musicConversionLock)
                {
                    Directory.CreateDirectory(targetDirectory);
                }
            }
        }

        /// <summary>
        /// Warning: Fancy string-splicing ahead.
        /// </summary>
        /// <param name="absoluteSourcePath"></param>
        /// <param name="targetRootDir"></param>
        /// <param name="fileIsLossless"></param>
        /// <returns></returns>
        private string GetAbsoluteTargetPath(string absoluteSourcePath, string targetRootDir, bool fileIsLossless)
        {
            string relativeSourcePath = absoluteSourcePath.Substring(SourceDirectory.Length, absoluteSourcePath.Length - SourceDirectory.Length);
            string absoluteTargetPath = fileIsLossless
                ? targetRootDir + relativeSourcePath.Substring(0, relativeSourcePath.Length - LosslessExtension.Length) + LossyOutputExtension
                : targetRootDir + relativeSourcePath;

            return absoluteTargetPath;
        }

        public bool IsReadyForConversion()
        {
            return
                !string.IsNullOrWhiteSpace(SourceDirectory) &&
                !string.IsNullOrWhiteSpace(TargetDirectory) &&
                Path.IsPathRooted(SourceDirectory) &&
                Path.IsPathRooted(TargetDirectory) &&
                Directory.Exists(SourceDirectory) &&
                Directory.Exists(TargetDirectory);
        }
    }
}
